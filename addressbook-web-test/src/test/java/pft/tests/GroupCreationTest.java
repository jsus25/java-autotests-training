package pft.tests;// Generated by Selenium IDE

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import io.qameta.allure.Description;
import io.qameta.allure.Owner;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import pft.model.GroupData;
import pft.model.Groups;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

public class GroupCreationTest extends TestBase {

  @DataProvider
  public Iterator<Object[]> validGroupsCsv() throws IOException {
    List<Object[]> list = new ArrayList<>();
    try (BufferedReader reader = new BufferedReader(new FileReader("src/test/resources/groups.csv"))) {
      String line = reader.readLine();
      while (line != null) {
        String[] split = line.split(";");
        list.add(new Object[]{new GroupData(null, split[0], split[1], split [2])});
        line = reader.readLine();
      }
    }
    return list.iterator();
  }
/*
  @DataProvider                  //пока не работает
  public Iterator<Object[]> validGroupsXml() throws IOException {
    BufferedReader reader = new BufferedReader(new FileReader("src/test/resources/groups.xml"));
    String xml = "";
    String line = reader.readLine();
    while (line != null) {
      xml += line;
      line = reader.readLine();
    }
    XStream xStream = new XStream();
    xStream.alias("group", GroupData.class);
    List<GroupData> groups = (List<GroupData>)xStream.fromXML(xml);
    return groups.stream().map(g -> new Object[]{g}).toList().iterator();
  }
*/
  @DataProvider
  public Iterator<Object[]> validGroupsJson() throws IOException {
    try (BufferedReader reader = new BufferedReader(new FileReader("src/test/resources/groups.json"))) {  //обернуто в try для автоматического закрытия файла
      String json = "";
      String line = reader.readLine();
      while (line != null) {
        json += line;
        line = reader.readLine();
      }
      Gson gson = new Gson();
      List<GroupData> groups = gson.fromJson(json, new TypeToken<List<GroupData>>(){}.getType());  //"new TypeToken<List<GroupData>>(){}.getType()" = List<GroupData>.class
      return groups.stream().map(g -> new Object[]{g}).toList().iterator();
    }
  }

  @Test(dataProvider = "validGroupsJson")
  @Owner("Julia Suslenkova")
  @Description("Group creation via UI")
  public void testGroupCreation(GroupData group) {
    app.goTo().groupPage();
    Groups before = app.db().groups();
    app.group().create(group);
    assertThat(app.group().count(), equalTo(before.size() + 1));
    Groups after = app.db().groups();
    int newElementId = after.stream().mapToInt((g) -> g.id()).max().getAsInt();
    assertThat(after, equalTo(before.withAdded(new GroupData(newElementId, group.name(), group.header(), group.footer()))));
  }

  @Test
  public void testBadGroupCreation() {
    app.goTo().groupPage();
    Groups before = app.db().groups();
    app.group().create(new GroupData(null,"group'", "h5", "f5"));
    assertThat(app.group().count(), equalTo(before.size()));
    Groups after = app.db().groups();
    assertThat(after, equalTo(before));
  }

}
